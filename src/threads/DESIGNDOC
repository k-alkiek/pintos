			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

mohammed kamal abdelrhman <muhammedkamal98@gmail.com>
rita samir abdo <ritasamir2587@gmail.com>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In src/threads/thread.h
struct thread
	int64_t wakeTime;	// a variable indicates the wakeTime of each sleeping thread.
In src/devices/timer.c
	struct list sleep_list;	//a list contains all sleeping threads.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
Instead of busy waiting, The sleeping thread will be blocked after
inserting it in the sleep_list in order according to its wakeTime
which equals to the summation of current time (the number of timer
ticks since the OS booted) and the time that thread should sleep.
In the timer interrupt handler, The front elements (the threads have
the smallest wakeTime) will be poped up and compare with current time.
The front threads will be unblocked until the current time will be 
bigger than the threads' wakeTime.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
The sleeping threads are inserted in the sleep_list in order according 
to the wakeTime so that the time that includes searching of the thread
with wakeTime less than the curent time would be saved.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
Synchronize the critical section of the shared code of timer_sleep()
with disabling the interrupt before entering the critical section 
and setting it back to its original intr_level after finishing the 
critical section.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
The race conditions are avoided by disabling the interrupt in timer_sleep()
and setting it back to its original intr_level when leaving the method. 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
That design is easy to implement and to understand.
It improves multiprogramming as another thread can be run on the proceesor 
instead of busy waiting.
It minimizes the amount of time spent in the timer interrupt handler

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In src/threads/thread.h

struct thread
	int initial_priority;
	A variable that stores the initial priority of a thread. Its value is initialized with the thread creation and only changes with thread_set_priority()
	
	struct list donations;
	A list of all threads that are potential donors to this thread. 
	Whenever a thread attempts to acquire a lock held by the current thread, 
	the attempting thread is added as a potential donor to the holding thread. 
	This list is used when processing the effective prioirty to be used in the 
	current thread.

	struct list_elem donation_elem;
	List element of the thread in the donations list. 
	Since every thread can only wait for one lock at a time, 
	it will only be associated as a potential donor for only one thread.

	struct lock *waiting_on;
	Pointer to the lock that the current thread attempted to acquire but is waiting on. 
	Whenever a lock is released, the list of donations is filtered from threads that 
	were waiting on the lock being released. The new effective priority for the current 
	thread is recomputed from the remaining donors in the donations list.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Every thread has a pointer to the lock its waiting on and thus has a 
pointer the lock holder. This structure is akin to an n-ary tree where each
thread effectively has a pointer to the thread that it can donate to as its 
parent and every thread has a list of donations which can be children threads 
that are potential donors.

                              +-----+
      wait_on_lock->holder    |     |
     +----------------------> |  L  |
     |                        |     |
     |       +--------------> +--+--+
     |       |                   |
+--------------------------+     |
|    |       |             |     |
| +--+--+ +--+--+          |     |
| |     | |     |          | <---+
| |  H  | |  M  |          |  List of donations
| |     | |     |          |
| +-----+ +-----+          |
+--------------------------+

When the donate priortiy event is triggered from a thread, the donated priority
propagtes up through the tree as long as priorites along the path are less
than the donated priority. Explained in depth in the algorithms section.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When a thread is blocked on a semaphore or condition, it is placed in order 
inside the list of waiters according to its priority. When a semaphore is 
released, the front thread in the list of waiters is selected to ensure
that the thread of highest priority is selected to be unblocked.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

If the lock is free, the thread acquires the lock normally. In case the lock
was already acquired by another thread, the data structure explained in the
previous section is updated by setting the wait_on_lock of the current
thread and adding it to the list of donations to the lock holder thread.
ThenÙˆ a chain of priority donations is triggered from the thread in propagtes 
up through the three described in B2, updating priorities of threads in its path.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

After releasing the lock, the current thread filters donations from donor
threads that were waiting on the lock being released. It then determines the
new prioirty by querying the filtered list of donations to determine the
maximum priority among them and use it till the next lock release and so on.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

The potential race could occur when two (or more) threads attempt to change 
their prority. To account for donated priorities, when a new priority is 
set for a thread, the effective priority is recomputed to make sure that the 
correct priority is assinged. This might result in a thread being assigned 
a lower priority to cause premeption to a higher priority thread just before 
it is able to set its priority level.

This was prevented by disabling interrupt inside thread_set_priority()
thus not allowing any premeption to the current theread if it is in
the middle of assigning its priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Because this design maintains effeciency and is easy to implement. It is 
easy to understand the behaviour of priority donations in the context of
trees as described in the data structure section. Although this design
uses additional storage for the list of donations, it correctly and
effeciently updates the priorities of the threads whenever a a thread has
to wait on a lock to acuqire.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
IN src/threads/thread.h
struct thread
	int nice;                           /* determine the niceness of the thread. */
    int recent_CPU;                     /* fixed-point number represent recent usage of CPU. */
#define NICE_MIN -20                    /* Lowest niceness. */
#define NICE_DEFAULT 0                  /* Default niceness. */
#define NICE_MAX 20                     /* Highest niceness. */
IN src/threads/thread.c
	static int load_avg                 /* fixed-point number represent avarage load of the system*/

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  	recent_cpu  priority    thread
ticks  	A   B   C   A   B   C   to run
-----  	--  --  --  --  --  --   ------
 0     	0   0   0   63  61  59   A
 4     	4   1   2   62  61  59   A   
 8      8   2   4   61  61  59   B
12      8   6   6   61  60  59   A
16      12  7   8   60  60  59   B
20      12  11  10  59  59  59   C
24      12  12  14  59  59  58   A    
28      16  13  16  59  59  58   B
32      16  17  18  59  58  58   A
36      20  18  20  58  58  58   B   

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?
yes if 2 threads for example have the same priority which one should run 
I made a decision such that the first one int the ready list will run.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?
inside interrupt_handler
i update the priority every Time Slice to reduce the time in interrupt
handler because thread on the cpu changed every Time Slice only but require
to calculate the load avarage and recent_cpu every time frequent.

outside
calculate the priority when setting new nice value.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
advantages:
	simple at its implementaion.
	solve the problem of blocking high priority thread of some thing
	from lower one.
disadvantage:
	reduce the preformance since the priority recalculated alot of time.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?
used define macros in implemantion which make layer of abstraction and 
improve preformance since it doesn't require calling a function.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
