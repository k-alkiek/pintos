		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mohammed Kamal Abdelrhman <muhammedkamal98@gmail.com>
Rita Samir Abdo <ritasamir2587@gmail.com>
Khaled Abdelfatah <khaledabdelfattah74@gmail.com>
Khaled Barie <k.alkiek@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In the process_execute, a new thread is created with the name of the
command using strtok_r () to get the name of the command. Also getting
all arguments using strtok_r () with a space as a delimiter. In the load
method, A helper function is called (push_argc_into_stack) to push all
the arguments into the stack in reverse order starting from argc-1 to 0
to be in right order as in the documentation figure.
To avoid the overflowing of the stack page, we limit the number of arguments
that can pass argc[50] to fit the page size (4 k) as i the documentation assumption.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The difference between them that in strtok(), the user sends the save pointer
to the function. Pintos implement strtok_r() so that if there are multiple
threads, the save pointer of each thread won't interfere with other threads'
save pointers when we retrieve the rest of words in the string.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) less overhead in the kernel mode.
2) validation can be done safely by the shell

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- In thread.h we added child thread struct to contain child relevant data. Resides in child thread/
struct child_thread
  {
    struct thread *child;
    int child_tid;
    struct thread *parent;
    struct semaphore parent_wait_sema;
    struct list_elem child_elem;
    int exit_status;
  };
- We added file descriptor struct to contain information about each file used
by the process like file pointer and the file handle.
struct file_descriptor
  {
    struct file *file_pointer;
    int file_handle;
    struct list_elem file_elem;
  };
- We also added (fd_counter) a file descroptor handle counter to assign unique
handle for each open file.
- In syscall.c we added (file_system_lock) to handle synchroniazation of multithreaded
programs which deals with the file system to avoid race conditions.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors is list of file descriptor which is an object that contains the file's
pointer and the file's handle (file handle is a unique number that assigned for each opened file).
The file descriptors are unique just within a single process not the entire OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

- In read: First of all check if the buffer and the buffer + size are a valid pointers
or not, if not exit with error, otherwise check the file descriptor number (fd) if fd
equal zero then read data from console (STDIN) using input_getc () finction otherwise
read user data from the corresponding file.

- In write: it performs the same as read but instead of reading it writes, if the fd
equal one the write into the console (STDOUT) using putbuf(buffer, size) function
otherwise write into the corresponding file.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For a contiguous distribution of data (full page of data) we need only one
inspection of the page table to get the page head back.
The greatest possible number might be 4,096 if it is not contiguous.
When itâ€™s contiguous, the greatest number would be 2, we surely want to check the
start pointer and the end pointer of the full page data. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

First of all we check if the thread with the tid passed to wait is a child of the
current thread, if not exit with error, otherwise the current thread wait on the 
child wait semaphore (parent_wait_sema) until the child thread exit.
After the child thread exit remove the child element from its parent list of children
to avoid multiple waiting and assign the child exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

- When executing a new process, we force the parent to wait until the child loads
successfuly. Our implementation uses a 0 initialized semaphore for this mechanism. 
After creating the child process, the parent downs the semaphore and gets blocked.
As soon as the child loads, it stores a boolean value of its success in the child_thread
struct and signals the parent. The parent upon waking checks for this value and
returns -1 if the child was not successfuly loaded.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- If wait is called on a non existing child process, it terminates returning -1.
 If it is called on an existing process, we use the semaphore parent_wait_sema
 to force the parent to wait. The child process upon exit will set its exit status
 in the child_thread struct and signals the parent to continue before terminating.
 The parent then continues to read the exit status and returns it accordignly. As for
 resources, we ensure that all files opened by the process are closed upon exit since
 we maintain a list of file descriptors associated with each process.

 P can terminate without waiting for C. this will not affect C and it will continue running as
 an orphaned process


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

